package main

import (
	"fmt"
)

/*
Маршруты (4)

Кирилл работает аналитиком в Ozon, и, недавно, ему в руки попал отчет, из которого он понял, что время доставки товаров в пункты выдачи можно значительно сократить.  Он заметил, что пункты выдачи в городе образуют выпуклый многоугольник, с количеством вершин, равным n, и располагаются на его вершинах, где одна вершина = один пункт выдачи.

Кирилл решил воспользоваться всеми прелестями современных технологий, он хочет проложить воздушные пути между пунктами выдачи, по которым будут перемещаться курьеры на грузоподъемных реактивных ранцах.

Можно выбрать какое-то число k, что каждый пункт выдачи будет соединен с k соседними пунктами выдачи слева и справа. Нужно найти минимальное k, чтобы кратчайшее расстояние между любыми двумя пунктами выдачи было меньше или равно r. Расстояние между пунктами выдачи примерно одинаковое, поэтому расстояние будет измеряться в количестве переходов, которые нужно сделать, чтобы попасть из одного пункта выдачи в другой.

Формат входных данных

В первую строку вводится одно целое число P(1<=R<=100) - количество наборов входных данных.

Для каждого набора входных данных в строку через пробел вводится два целых числа n и r. Ограничения: 2 < n < 10^18, 1 <= r < 10^7



Формат выходных данных

Для каждого набора чисел выведите минимальное k, удовлетворяющее условию.


Примеры

Входные данные:
2
6 2
3 1
Выходные данные:
2
1


Пояснение к примеру
Если при n = 6 выбрать k = 1 (соединив каждую вершину только с одним ближайшим соседом слева и справа), то минимальное расстояние, например от узла A до узла D будет равно 3. Но 3 > r, значит это решение не удовлетворяет условию.
Если при n = 6 выбрать k = 2 (соединив каждую вершину с двумя ближайшими соседями с каждой стороны), то минимальное расстояние между любой парой вершин получается равным 2. Это удовлетворяет условию 2 <= r, значит это верное решение.
Для треугольника (n = 3) все вершины являются соседними друг другу, значит единственно возможным решением является k = 1, что удовлетворяет условию 1 <= r.

*/
func main() {
	var input string
	fmt.Scanf("%s", &input)

	arr := make([]string, 0)
	for _, item := range arr {
		fmt.Println(item)
	}
}

func Some(input string) []string {
	arr := make([]string, 0)

	return arr
}
